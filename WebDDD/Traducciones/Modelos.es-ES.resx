<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Crear_modelo" xml:space="preserve">
    <value>Nuevo Modelo</value>
  </data>
  <data name="Descripcion_borrado" xml:space="preserve">
    <value>Eliminación de un modelo existente</value>
  </data>
  <data name="Descripcion_detalles" xml:space="preserve">
    <value>Información de un modelo existente</value>
  </data>
  <data name="Descripcion_index" xml:space="preserve">
    <value>Modelos existentes en el sistema</value>
  </data>
  <data name="Editar_modelo" xml:space="preserve">
    <value>Editar Modelo</value>
  </data>
  <data name="Eliminar_modelo" xml:space="preserve">
    <value>Eliminar Modelo</value>
  </data>
  <data name="Encabezado_borrado" xml:space="preserve">
    <value>¿Seguro que desea eliminar la información del modelo seleccionado?</value>
  </data>
  <data name="Encabezado_creacion" xml:space="preserve">
    <value>Introduzca a continuación la información del nueva marca</value>
  </data>
  <data name="Encabezado_detalles" xml:space="preserve">
    <value>A continuación se muestra la información del modelo seleccionado</value>
  </data>
  <data name="Encabezado_edicion" xml:space="preserve">
    <value>Modifique la información que desee editar del modelo a continuación</value>
  </data>
  <data name="Marca" xml:space="preserve">
    <value>Marca</value>
  </data>
  <data name="Modelo" xml:space="preserve">
    <value>Modelos</value>
  </data>
  <data name="Modelos_pagina" xml:space="preserve">
    <value>Modelos por página</value>
  </data>
  <data name="Modelo_creado_error" xml:space="preserve">
    <value>Se ha producido un error en la creación del modelo:{0}.</value>
  </data>
  <data name="Modelo_creado_exito" xml:space="preserve">
    <value>El modelo {0} ha sido creado con éxito.</value>
  </data>
  <data name="Modelo_editado_exito" xml:space="preserve">
    <value>El modelo {0} ha sido editado con éxito.</value>
  </data>
  <data name="Modelo_editado_error" xml:space="preserve">
    <value>Se ha producido un error en la edición del modelo: {0}.</value>
  </data>
  <data name="Modelo_eliminado_error" xml:space="preserve">
    <value>El modelo {0} no ha sido eliminado.</value>
  </data>
  <data name="Modelo_eliminado_exito" xml:space="preserve">
    <value>El modelo {0} ha sido eliminado con éxito.</value>
  </data>
  <data name="Nombre" xml:space="preserve">
    <value>Nombre</value>
  </data>
  <data name="Nombre_repetido" xml:space="preserve">
    <value>El nombre del modelo no está disponible porque ya está en uso en esa marca.</value>
  </data>
  <data name="Error_modelo_equipos" xml:space="preserve">
    <value>El {0} tiene equipos asociados. No puede eliminarla.</value>
  </data>
  <data name="Modelo_simple" xml:space="preserve">
    <value>Modelo</value>
  </data>
  <data name="Referencia_repetida" xml:space="preserve">
    <value>La referencia del modelo no está disponible porque ya está en uso.</value>
  </data>
  <data name="Fichero_obligatorio" xml:space="preserve">
    <value>Es obligatorio subir un fichero si se especifica una referencia.</value>
  </data>
  <data name="Cabecera" xml:space="preserve">
    <value>Cabecera</value>
  </data>
  <data name="Longitud_identificador" xml:space="preserve">
    <value>Longitud del identificador</value>
  </data>
  <data name="Cabecera_repetida" xml:space="preserve">
    <value>La cabecera del modelo no está disponible porque ya está en uso.</value>
  </data>
  <data name="Error_longitud_identificador" xml:space="preserve">
    <value>La longitud del identificador debe ser mayor que la longitud de la cabecera.</value>
  </data>
  <data name="Modelo_4G" xml:space="preserve">
    <value>Modelo 4G</value>
  </data>
  <data name="Modelo_referencia" xml:space="preserve">
    <value>El modelo {0} no se permite borrar ya que se encuentra en uso por equipos.</value>
  </data>
  <data name="Error_cabecera_longitud_identificador" xml:space="preserve">
    <value>Si se especifica una cabecera se debe especificar también la longitud del identificador, y viceversa.</value>
  </data>
  <data name="Informacion_referencia_fichero" xml:space="preserve">
    <value>*Si la referencia del modelo está establecida, debe aportar obligatoriamente un fichero zip nuevo y viceversa, lo que incrementará la versión del modelo. Por otra parte si elimina la refencia y no aporta fichero zip alguno, la referencia, versión y fichero del modelo se establecerán como nulos.</value>
  </data>
</root>